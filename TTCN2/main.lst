CCS PCM C Compiler, Version 5.015, 5967               12-Thg3-22 15:02

               Filename:   F:\TTCN2\main.lst

               ROM used:   1089 words (13%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           77 (21%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   37B
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,00
0005:  DATA C4,37
0006:  DATA A0,30
0007:  DATA 6D,10
0008:  DATA 20,10
0009:  DATA 20,10
000A:  DATA 20,10
000B:  DATA 25,32
000C:  DATA 20,00
000D:  DATA 25,00
000E:  DATA 4E,34
000F:  DATA E9,32
0010:  DATA 74,10
0011:  DATA E4,37
0012:  DATA 20,10
0013:  DATA 20,10
0014:  DATA 25,32
0015:  DATA EF,21
0016:  DATA 00,01
0017:  DATA C4,37
0018:  DATA A0,30
0019:  DATA 6D,10
001A:  DATA 20,10
001B:  DATA 3A,10
001C:  DATA 20,10
001D:  DATA 25,32
001E:  DATA 20,00
001F:  DATA 25,00
0020:  DATA 4E,34
0021:  DATA E9,32
0022:  DATA 74,10
0023:  DATA E4,37
0024:  DATA 3A,10
0025:  DATA 20,10
0026:  DATA 25,32
0027:  DATA EF,21
0028:  DATA 00,01
*
013C:  MOVF   0B,W
013D:  MOVWF  3B
013E:  BCF    0B.7
013F:  BSF    03.5
0140:  BSF    03.6
0141:  BSF    0C.7
0142:  BSF    0C.0
0143:  NOP
0144:  NOP
0145:  BCF    03.5
0146:  BCF    03.6
0147:  BTFSC  3B.7
0148:  BSF    0B.7
0149:  BSF    03.6
014A:  MOVF   0C,W
014B:  ANDLW  7F
014C:  BTFSC  03.2
014D:  GOTO   190
014E:  BCF    03.6
014F:  MOVWF  3B
0150:  BSF    03.6
0151:  MOVF   0D,W
0152:  BCF    03.6
0153:  MOVWF  3C
0154:  BSF    03.6
0155:  MOVF   0F,W
0156:  BCF    03.6
0157:  MOVWF  3D
0158:  MOVF   3B,W
0159:  MOVWF  41
015A:  CALL   110
015B:  MOVF   3C,W
015C:  BSF    03.6
015D:  MOVWF  0D
015E:  BCF    03.6
015F:  MOVF   3D,W
0160:  BSF    03.6
0161:  MOVWF  0F
0162:  BCF    03.6
0163:  MOVF   0B,W
0164:  MOVWF  3E
0165:  BCF    0B.7
0166:  BSF    03.5
0167:  BSF    03.6
0168:  BSF    0C.7
0169:  BSF    0C.0
016A:  NOP
016B:  NOP
016C:  BCF    03.5
016D:  BCF    03.6
016E:  BTFSC  3E.7
016F:  BSF    0B.7
0170:  BSF    03.6
0171:  RLF    0C,W
0172:  RLF    0E,W
0173:  ANDLW  7F
0174:  BTFSC  03.2
0175:  GOTO   190
0176:  BCF    03.6
0177:  MOVWF  3B
0178:  BSF    03.6
0179:  MOVF   0D,W
017A:  BCF    03.6
017B:  MOVWF  3C
017C:  BSF    03.6
017D:  MOVF   0F,W
017E:  BCF    03.6
017F:  MOVWF  3D
0180:  MOVF   3B,W
0181:  MOVWF  41
0182:  CALL   110
0183:  MOVF   3C,W
0184:  BSF    03.6
0185:  MOVWF  0D
0186:  BCF    03.6
0187:  MOVF   3D,W
0188:  BSF    03.6
0189:  MOVWF  0F
018A:  INCF   0D,F
018B:  BTFSC  03.2
018C:  INCF   0F,F
018D:  BCF    03.6
018E:  GOTO   13C
018F:  BSF    03.6
0190:  BCF    03.6
0191:  RETURN
*
023B:  MOVF   0B,W
023C:  MOVWF  3C
023D:  BCF    0B.7
023E:  BSF    03.5
023F:  BSF    03.6
0240:  BSF    0C.7
0241:  BSF    0C.0
0242:  NOP
0243:  NOP
0244:  BCF    03.5
0245:  BCF    03.6
0246:  BTFSC  3C.7
0247:  BSF    0B.7
0248:  BTFSC  03.0
0249:  GOTO   272
024A:  BSF    03.6
024B:  MOVF   0C,W
024C:  ANDLW  7F
024D:  BCF    03.6
024E:  MOVWF  3C
024F:  BSF    03.6
0250:  MOVF   0D,W
0251:  BCF    03.6
0252:  MOVWF  3D
0253:  BSF    03.6
0254:  MOVF   0F,W
0255:  BCF    03.6
0256:  MOVWF  3E
0257:  MOVF   3C,W
0258:  MOVWF  41
0259:  CALL   110
025A:  MOVF   3D,W
025B:  BSF    03.6
025C:  MOVWF  0D
025D:  BCF    03.6
025E:  MOVF   3E,W
025F:  BSF    03.6
0260:  MOVWF  0F
0261:  BCF    03.6
0262:  MOVF   0B,W
0263:  MOVWF  3F
0264:  BCF    0B.7
0265:  BSF    03.5
0266:  BSF    03.6
0267:  BSF    0C.7
0268:  BSF    0C.0
0269:  NOP
026A:  NOP
026B:  BCF    03.5
026C:  BCF    03.6
026D:  BTFSC  3F.7
026E:  BSF    0B.7
026F:  DECFSZ 3B,F
0270:  GOTO   272
0271:  GOTO   291
0272:  BSF    03.6
0273:  RLF    0C,W
0274:  RLF    0E,W
0275:  ANDLW  7F
0276:  BCF    03.6
0277:  MOVWF  3C
0278:  BSF    03.6
0279:  MOVF   0D,W
027A:  BCF    03.6
027B:  MOVWF  3D
027C:  BSF    03.6
027D:  MOVF   0F,W
027E:  BCF    03.6
027F:  MOVWF  3E
0280:  MOVF   3C,W
0281:  MOVWF  41
0282:  CALL   110
0283:  MOVF   3D,W
0284:  BSF    03.6
0285:  MOVWF  0D
0286:  BCF    03.6
0287:  MOVF   3E,W
0288:  BSF    03.6
0289:  MOVWF  0F
028A:  INCF   0D,F
028B:  BTFSC  03.2
028C:  INCF   0F,F
028D:  BCF    03.0
028E:  BCF    03.6
028F:  DECFSZ 3B,F
0290:  GOTO   23B
0291:  RETURN
0292:  MOVF   42,W
0293:  CLRF   78
0294:  SUBWF  41,W
0295:  BTFSC  03.0
0296:  GOTO   29A
0297:  MOVF   41,W
0298:  MOVWF  77
0299:  GOTO   2A6
029A:  CLRF   77
029B:  MOVLW  08
029C:  MOVWF  43
029D:  RLF    41,F
029E:  RLF    77,F
029F:  MOVF   42,W
02A0:  SUBWF  77,W
02A1:  BTFSC  03.0
02A2:  MOVWF  77
02A3:  RLF    78,F
02A4:  DECFSZ 43,F
02A5:  GOTO   29D
02A6:  RETURN
02A7:  MOVLW  20
02A8:  BTFSS  3C.4
02A9:  MOVLW  30
02AA:  MOVWF  3D
02AB:  MOVF   3B,W
02AC:  MOVWF  77
02AD:  BTFSS  3B.7
02AE:  GOTO   2B7
02AF:  COMF   77,F
02B0:  INCF   77,F
02B1:  MOVF   77,W
02B2:  MOVWF  3B
02B3:  MOVLW  2D
02B4:  MOVWF  3D
02B5:  BSF    3C.7
02B6:  BSF    3C.0
02B7:  MOVF   3B,W
02B8:  MOVWF  41
02B9:  MOVLW  64
02BA:  MOVWF  42
02BB:  CALL   292
02BC:  MOVF   77,W
02BD:  MOVWF  3B
02BE:  MOVLW  30
02BF:  ADDWF  78,W
02C0:  MOVWF  3E
02C1:  MOVF   3B,W
02C2:  MOVWF  41
02C3:  MOVLW  0A
02C4:  MOVWF  42
02C5:  CALL   292
02C6:  MOVLW  30
02C7:  ADDWF  77,W
02C8:  MOVWF  40
02C9:  MOVLW  30
02CA:  ADDWF  78,W
02CB:  MOVWF  3F
02CC:  MOVF   3D,W
02CD:  MOVWF  77
02CE:  MOVLW  30
02CF:  SUBWF  3E,W
02D0:  BTFSC  03.2
02D1:  GOTO   2D6
02D2:  BSF    3C.1
02D3:  BTFSC  3C.7
02D4:  BSF    3C.2
02D5:  GOTO   2EA
02D6:  MOVF   3D,W
02D7:  MOVWF  3E
02D8:  MOVLW  20
02D9:  MOVWF  3D
02DA:  MOVLW  30
02DB:  SUBWF  3F,W
02DC:  BTFSC  03.2
02DD:  GOTO   2E2
02DE:  BSF    3C.0
02DF:  BTFSC  3C.7
02E0:  BSF    3C.1
02E1:  GOTO   2EA
02E2:  BTFSS  03.2
02E3:  BSF    3C.0
02E4:  BTFSS  03.2
02E5:  GOTO   2EA
02E6:  MOVF   3E,W
02E7:  MOVWF  3F
02E8:  MOVLW  20
02E9:  MOVWF  3E
02EA:  BTFSC  3C.2
02EB:  GOTO   2F1
02EC:  BTFSC  3C.1
02ED:  GOTO   2F4
02EE:  BTFSC  3C.0
02EF:  GOTO   2F7
02F0:  GOTO   2FA
02F1:  MOVF   3D,W
02F2:  MOVWF  41
02F3:  CALL   110
02F4:  MOVF   3E,W
02F5:  MOVWF  41
02F6:  CALL   110
02F7:  MOVF   3F,W
02F8:  MOVWF  41
02F9:  CALL   110
02FA:  MOVF   40,W
02FB:  MOVWF  41
02FC:  CALL   110
02FD:  RETURN
02FE:  MOVF   38,W
02FF:  MOVWF  04
0300:  BCF    03.7
0301:  BTFSC  39.0
0302:  BSF    03.7
0303:  MOVF   41,W
0304:  MOVWF  00
0305:  INCF   04,F
0306:  CLRF   00
0307:  INCF   38,F
0308:  BTFSC  03.2
0309:  INCF   39,F
030A:  RETURN
030B:  MOVLW  20
030C:  BTFSS  3C.4
030D:  MOVLW  30
030E:  MOVWF  3D
030F:  MOVF   3B,W
0310:  MOVWF  77
0311:  BTFSS  3B.7
0312:  GOTO   31B
0313:  COMF   77,F
0314:  INCF   77,F
0315:  MOVF   77,W
0316:  MOVWF  3B
0317:  MOVLW  2D
0318:  MOVWF  3D
0319:  BSF    3C.7
031A:  BSF    3C.0
031B:  MOVF   3B,W
031C:  MOVWF  41
031D:  MOVLW  64
031E:  MOVWF  42
031F:  CALL   292
0320:  MOVF   77,W
0321:  MOVWF  3B
0322:  MOVLW  30
0323:  ADDWF  78,W
0324:  MOVWF  3E
0325:  MOVF   3B,W
0326:  MOVWF  41
0327:  MOVLW  0A
0328:  MOVWF  42
0329:  CALL   292
032A:  MOVLW  30
032B:  ADDWF  77,W
032C:  MOVWF  40
032D:  MOVLW  30
032E:  ADDWF  78,W
032F:  MOVWF  3F
0330:  MOVF   3D,W
0331:  MOVWF  77
0332:  MOVLW  30
0333:  SUBWF  3E,W
0334:  BTFSC  03.2
0335:  GOTO   33A
0336:  BSF    3C.1
0337:  BTFSC  3C.7
0338:  BSF    3C.2
0339:  GOTO   34E
033A:  MOVF   3D,W
033B:  MOVWF  3E
033C:  MOVLW  20
033D:  MOVWF  3D
033E:  MOVLW  30
033F:  SUBWF  3F,W
0340:  BTFSC  03.2
0341:  GOTO   346
0342:  BSF    3C.0
0343:  BTFSC  3C.7
0344:  BSF    3C.1
0345:  GOTO   34E
0346:  BTFSS  03.2
0347:  BSF    3C.0
0348:  BTFSS  03.2
0349:  GOTO   34E
034A:  MOVF   3E,W
034B:  MOVWF  3F
034C:  MOVLW  20
034D:  MOVWF  3E
034E:  BTFSC  3C.2
034F:  GOTO   355
0350:  BTFSC  3C.1
0351:  GOTO   358
0352:  BTFSC  3C.0
0353:  GOTO   35B
0354:  GOTO   35E
0355:  MOVF   3D,W
0356:  MOVWF  41
0357:  CALL   2FE
0358:  MOVF   3E,W
0359:  MOVWF  41
035A:  CALL   2FE
035B:  MOVF   3F,W
035C:  MOVWF  41
035D:  CALL   2FE
035E:  MOVF   40,W
035F:  MOVWF  41
0360:  CALL   2FE
0361:  RETURN
0362:  MOVF   00,F
0363:  BTFSC  03.2
0364:  GOTO   378
0365:  CLRF   3C
0366:  MOVF   04,W
0367:  MOVWF  3B
0368:  BCF    3C.0
0369:  BTFSC  03.7
036A:  BSF    3C.0
036B:  MOVF   00,W
036C:  BTFSS  0C.4
036D:  GOTO   36C
036E:  MOVWF  19
036F:  MOVF   3B,W
0370:  MOVWF  04
0371:  BCF    03.7
0372:  BTFSC  3C.0
0373:  BSF    03.7
0374:  INCF   04,F
0375:  BTFSC  03.2
0376:  INCF   05,F
0377:  GOTO   362
0378:  BCF    0A.3
0379:  BCF    0A.4
037A:  GOTO   437 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES WDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... //#device ICD=TRUE 
.................... #use delay(crystal=8MHz) 
*
0029:  MOVLW  66
002A:  MOVWF  04
002B:  BCF    03.7
002C:  MOVF   00,W
002D:  BTFSC  03.2
002E:  GOTO   03C
002F:  MOVLW  02
0030:  MOVWF  78
0031:  CLRF   77
0032:  DECFSZ 77,F
0033:  GOTO   032
0034:  DECFSZ 78,F
0035:  GOTO   031
0036:  MOVLW  97
0037:  MOVWF  77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 00,F
003B:  GOTO   02F
003C:  RETURN
....................  
....................  
....................  
.................... setup_wdt(WDT_1000MS); 
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... #use fast_io(B) 
.................... #use fast_io(D) 
.................... #define RED             PIN_D1 
.................... #define BLUE            PIN_D0 
....................  
.................... #define LCD_ENABLE_PIN  PIN_B3 
.................... #define LCD_RS_PIN      PIN_B1 
.................... #define LCD_RW_PIN      PIN_B2 
.................... #define LCD_DATA4       PIN_B4 
.................... #define LCD_DATA5       PIN_B5 
.................... #define LCD_DATA6       PIN_B6 
.................... #define LCD_DATA7       PIN_B7 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0082:  BSF    03.5
0083:  BSF    06.4
....................    output_float(LCD_DATA5); 
0084:  BSF    06.5
....................    output_float(LCD_DATA6); 
0085:  BSF    06.6
....................    output_float(LCD_DATA7); 
0086:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0087:  BCF    03.5
0088:  BSF    06.2
....................    delay_cycles(1); 
0089:  NOP
....................    lcd_output_enable(1); 
008A:  BSF    06.3
....................    delay_cycles(1); 
008B:  NOP
....................    high = lcd_read_nibble(); 
008C:  CALL   057
008D:  MOVF   78,W
008E:  MOVWF  49
....................        
....................    lcd_output_enable(0); 
008F:  BCF    06.3
....................    delay_cycles(1); 
0090:  NOP
....................    lcd_output_enable(1); 
0091:  BSF    06.3
....................    delay_us(1); 
0092:  GOTO   093
....................    low = lcd_read_nibble(); 
0093:  CALL   057
0094:  MOVF   78,W
0095:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
0096:  BCF    06.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0097:  BSF    03.5
0098:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0099:  BCF    06.5
....................    output_drive(LCD_DATA6); 
009A:  BCF    06.6
....................    output_drive(LCD_DATA7); 
009B:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
009C:  BCF    03.5
009D:  SWAPF  49,W
009E:  MOVWF  77
009F:  MOVLW  F0
00A0:  ANDWF  77,F
00A1:  MOVF   77,W
00A2:  IORWF  48,W
00A3:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0057:  CLRF   4A
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0058:  MOVLW  00
0059:  BTFSC  06.4
005A:  MOVLW  01
005B:  IORWF  4A,F
....................    n |= input(LCD_DATA5) << 1; 
005C:  MOVLW  00
005D:  BTFSC  06.5
005E:  MOVLW  01
005F:  MOVWF  77
0060:  BCF    03.0
0061:  RLF    77,F
0062:  MOVF   77,W
0063:  IORWF  4A,F
....................    n |= input(LCD_DATA6) << 2; 
0064:  MOVLW  00
0065:  BTFSC  06.6
0066:  MOVLW  01
0067:  MOVWF  77
0068:  RLF    77,F
0069:  RLF    77,F
006A:  MOVLW  FC
006B:  ANDWF  77,F
006C:  MOVF   77,W
006D:  IORWF  4A,F
....................    n |= input(LCD_DATA7) << 3; 
006E:  MOVLW  00
006F:  BTFSC  06.7
0070:  MOVLW  01
0071:  MOVWF  77
0072:  RLF    77,F
0073:  RLF    77,F
0074:  RLF    77,F
0075:  MOVLW  F8
0076:  ANDWF  77,F
0077:  MOVF   77,W
0078:  IORWF  4A,F
....................     
....................    return(n); 
0079:  MOVF   4A,W
007A:  MOVWF  78
....................   #else 
007B:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
003D:  BTFSC  49.0
003E:  GOTO   041
003F:  BCF    06.4
0040:  GOTO   042
0041:  BSF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0042:  BTFSC  49.1
0043:  GOTO   046
0044:  BCF    06.5
0045:  GOTO   047
0046:  BSF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0047:  BTFSC  49.2
0048:  GOTO   04B
0049:  BCF    06.6
004A:  GOTO   04C
004B:  BSF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
004C:  BTFSC  49.3
004D:  GOTO   050
004E:  BCF    06.7
004F:  GOTO   051
0050:  BSF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0051:  NOP
....................    lcd_output_enable(1); 
0052:  BSF    06.3
....................    delay_us(2); 
0053:  GOTO   054
0054:  GOTO   055
....................    lcd_output_enable(0); 
0055:  BCF    06.3
0056:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
007C:  BSF    03.5
007D:  BCF    06.3
....................    lcd_rs_tris(); 
007E:  BCF    06.1
....................    lcd_rw_tris(); 
007F:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0080:  BCF    03.5
0081:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00A4:  MOVF   78,W
00A5:  MOVWF  48
00A6:  BTFSC  48.7
00A7:  GOTO   082
....................    lcd_output_rs(address); 
00A8:  MOVF   46,F
00A9:  BTFSS  03.2
00AA:  GOTO   0AD
00AB:  BCF    06.1
00AC:  GOTO   0AE
00AD:  BSF    06.1
....................    delay_cycles(1); 
00AE:  NOP
....................    lcd_output_rw(0); 
00AF:  BCF    06.2
....................    delay_cycles(1); 
00B0:  NOP
....................    lcd_output_enable(0); 
00B1:  BCF    06.3
....................    lcd_send_nibble(n >> 4); 
00B2:  SWAPF  47,W
00B3:  MOVWF  48
00B4:  MOVLW  0F
00B5:  ANDWF  48,F
00B6:  MOVF   48,W
00B7:  MOVWF  49
00B8:  CALL   03D
....................    lcd_send_nibble(n & 0xf); 
00B9:  MOVF   47,W
00BA:  ANDLW  0F
00BB:  MOVWF  48
00BC:  MOVWF  49
00BD:  CALL   03D
00BE:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00BF:  MOVLW  28
00C0:  MOVWF  3C
00C1:  MOVLW  0C
00C2:  MOVWF  3D
00C3:  MOVLW  01
00C4:  MOVWF  3E
00C5:  MOVLW  06
00C6:  MOVWF  3F
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00C7:  BCF    06.3
....................    lcd_output_rs(0); 
00C8:  BCF    06.1
....................    lcd_output_rw(0); 
00C9:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CA:  BSF    03.5
00CB:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00CC:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00CD:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00CE:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00CF:  BCF    06.3
....................    lcd_rs_tris(); 
00D0:  BCF    06.1
....................    lcd_rw_tris(); 
00D1:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00D2:  MOVLW  0F
00D3:  BCF    03.5
00D4:  MOVWF  66
00D5:  CALL   029
....................    for(i=1;i<=3;++i) 
00D6:  MOVLW  01
00D7:  MOVWF  3B
00D8:  MOVF   3B,W
00D9:  SUBLW  03
00DA:  BTFSS  03.0
00DB:  GOTO   0E4
....................    { 
....................        lcd_send_nibble(3); 
00DC:  MOVLW  03
00DD:  MOVWF  49
00DE:  CALL   03D
....................        delay_ms(5); 
00DF:  MOVLW  05
00E0:  MOVWF  66
00E1:  CALL   029
00E2:  INCF   3B,F
00E3:  GOTO   0D8
....................    } 
....................     
....................    lcd_send_nibble(2); 
00E4:  MOVLW  02
00E5:  MOVWF  49
00E6:  CALL   03D
....................    delay_ms(5); 
00E7:  MOVLW  05
00E8:  MOVWF  66
00E9:  CALL   029
....................    for(i=0;i<=3;++i) 
00EA:  CLRF   3B
00EB:  MOVF   3B,W
00EC:  SUBLW  03
00ED:  BTFSS  03.0
00EE:  GOTO   0FB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00EF:  MOVLW  3C
00F0:  ADDWF  3B,W
00F1:  MOVWF  04
00F2:  BCF    03.7
00F3:  MOVF   00,W
00F4:  MOVWF  40
00F5:  CLRF   46
00F6:  MOVF   40,W
00F7:  MOVWF  47
00F8:  CALL   07C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00F9:  INCF   3B,F
00FA:  GOTO   0EB
00FB:  BCF    0A.3
00FC:  BCF    0A.4
00FD:  GOTO   398 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00FE:  DECFSZ 43,W
00FF:  GOTO   101
0100:  GOTO   104
....................       address=LCD_LINE_TWO; 
0101:  MOVLW  40
0102:  MOVWF  44
0103:  GOTO   105
....................    else 
....................       address=0; 
0104:  CLRF   44
....................       
....................    address+=x-1; 
0105:  MOVLW  01
0106:  SUBWF  42,W
0107:  ADDWF  44,F
....................    lcd_send_byte(0,0x80|address); 
0108:  MOVF   44,W
0109:  IORLW  80
010A:  MOVWF  45
010B:  CLRF   46
010C:  MOVF   45,W
010D:  MOVWF  47
010E:  CALL   07C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
010F:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0110:  MOVF   41,W
0111:  XORLW  07
0112:  BTFSC  03.2
0113:  GOTO   11E
0114:  XORLW  0B
0115:  BTFSC  03.2
0116:  GOTO   123
0117:  XORLW  06
0118:  BTFSC  03.2
0119:  GOTO   12B
011A:  XORLW  02
011B:  BTFSC  03.2
011C:  GOTO   131
011D:  GOTO   136
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
011E:  MOVLW  01
011F:  MOVWF  42
0120:  MOVWF  43
0121:  CALL   0FE
0122:  GOTO   13B
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0123:  CLRF   46
0124:  MOVLW  01
0125:  MOVWF  47
0126:  CALL   07C
....................                      delay_ms(2); 
0127:  MOVLW  02
0128:  MOVWF  66
0129:  CALL   029
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
012A:  GOTO   13B
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
012B:  MOVLW  01
012C:  MOVWF  42
012D:  MOVLW  02
012E:  MOVWF  43
012F:  CALL   0FE
0130:  GOTO   13B
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0131:  CLRF   46
0132:  MOVLW  10
0133:  MOVWF  47
0134:  CALL   07C
0135:  GOTO   13B
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0136:  MOVLW  01
0137:  MOVWF  46
0138:  MOVF   41,W
0139:  MOVWF  47
013A:  CALL   07C
....................      #endif 
....................    } 
013B:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #define DATA            PIN_D7 
....................  
.................... #bit Data_Pin_TRIS = 0x88.7 
.................... #bit Data_Pin = 0x08.7 
....................  
.................... int8 RH_byte1; 
.................... int8 RH_byte2; 
.................... int8 T_byte1; 
.................... int8 T_byte2; 
.................... char str[20]; 
.................... void DHT11_start() 
.................... {  
....................    Data_Pin_TRIS = 0; 
*
0195:  BSF    03.5
0196:  BCF    08.7
....................    Data_Pin = 0; 
0197:  BCF    03.5
0198:  BCF    08.7
....................    delay_ms(18); 
0199:  MOVLW  12
019A:  MOVWF  66
019B:  CALL   029
....................    Data_Pin = 1; 
019C:  BSF    08.7
....................    Data_Pin_TRIS = 1; 
019D:  BSF    03.5
019E:  BSF    08.7
....................    delay_us(40); // doi 20-40us thi data xuong 0 
019F:  MOVLW  1A
01A0:  MOVWF  77
01A1:  DECFSZ 77,F
01A2:  GOTO   1A1
01A3:  NOP
....................    if(Data_Pin == 0) 
01A4:  BCF    03.5
01A5:  BTFSC  08.7
01A6:  GOTO   1B7
....................    { 
....................       delay_us(80); //doi 80us thi Data len 1 
01A7:  MOVLW  34
01A8:  MOVWF  77
01A9:  DECFSZ 77,F
01AA:  GOTO   1A9
01AB:  GOTO   1AC
01AC:  NOP
....................       if(Data_Pin == 1) 
01AD:  BTFSS  08.7
01AE:  GOTO   1B5
....................       { 
....................          delay_us(80); 
01AF:  MOVLW  34
01B0:  MOVWF  77
01B1:  DECFSZ 77,F
01B2:  GOTO   1B1
01B3:  GOTO   1B4
01B4:  NOP
....................       } 
....................       output_low(RED); 
01B5:  BCF    08.1
....................    } 
01B6:  GOTO   1B8
....................    else output_high(RED); 
01B7:  BSF    08.1
.................... } 
.................... void Read_DTH11() 
*
0192:  BCF    3B.0
.................... { 
....................    int1 test=0; 
....................    int a[40]; 
....................     
....................    while(test==0) 
0193:  BTFSC  3B.0
0194:  GOTO   238
....................    {  
....................       DHT11_start(); 
....................       //lcd_gotoxy(1,1); 
....................       //printf(lcd_putc,"Dang ket noi..."); 
....................       //Nhan du lieu 
....................       for(int i = 0; i<40; i++) 
*
01B8:  CLRF   64
01B9:  MOVF   64,W
01BA:  SUBLW  27
01BB:  BTFSS  03.0
01BC:  GOTO   1D7
....................       { 
....................          while(Data_Pin == 0); //doi len 1 
01BD:  BTFSS  08.7
01BE:  GOTO   1BD
....................          delay_us(50); 
01BF:  MOVLW  20
01C0:  MOVWF  77
01C1:  DECFSZ 77,F
01C2:  GOTO   1C1
01C3:  GOTO   1C4
01C4:  NOP
....................          if(Data_Pin == 1) //trong >28us ma data van =1 thi se gui bit 1 
01C5:  BTFSS  08.7
01C6:  GOTO   1D0
....................          { 
....................             a[i] = 1; 
01C7:  MOVLW  3C
01C8:  ADDWF  64,W
01C9:  MOVWF  04
01CA:  BCF    03.7
01CB:  MOVLW  01
01CC:  MOVWF  00
....................             while(Data_Pin == 1){}  //doi xuong 0, ket thuc qua trinh nhan 1 bit 
01CD:  BTFSC  08.7
01CE:  GOTO   1CD
....................          } 
01CF:  GOTO   1D5
....................          else a[i] = 0; 
01D0:  MOVLW  3C
01D1:  ADDWF  64,W
01D2:  MOVWF  04
01D3:  BCF    03.7
01D4:  CLRF   00
01D5:  INCF   64,F
01D6:  GOTO   1B9
....................       }   
....................       //Xu ly du lieu 
....................       for(i=0; i<8; i++) 
01D7:  CLRF   64
01D8:  MOVF   64,W
01D9:  SUBLW  07
01DA:  BTFSS  03.0
01DB:  GOTO   1E8
....................       RH_byte1 = (RH_byte1<<1) | a[i]; //RH_byte1 = bit0.byte RH_byte1 (=0) + a[i](= 0 or1)  
01DC:  BCF    03.0
01DD:  RLF    20,W
01DE:  MOVWF  66
01DF:  MOVLW  3C
01E0:  ADDWF  64,W
01E1:  MOVWF  04
01E2:  BCF    03.7
01E3:  MOVF   00,W
01E4:  IORWF  66,W
01E5:  MOVWF  20
01E6:  INCF   64,F
01E7:  GOTO   1D8
....................       for(i=8; i<16; i++) 
01E8:  MOVLW  08
01E9:  MOVWF  64
01EA:  MOVF   64,W
01EB:  SUBLW  0F
01EC:  BTFSS  03.0
01ED:  GOTO   1FA
....................       RH_byte2 = (RH_byte2<<1) | a[i];  
01EE:  BCF    03.0
01EF:  RLF    21,W
01F0:  MOVWF  66
01F1:  MOVLW  3C
01F2:  ADDWF  64,W
01F3:  MOVWF  04
01F4:  BCF    03.7
01F5:  MOVF   00,W
01F6:  IORWF  66,W
01F7:  MOVWF  21
01F8:  INCF   64,F
01F9:  GOTO   1EA
....................       for(i=16; i<24; i++) 
01FA:  MOVLW  10
01FB:  MOVWF  64
01FC:  MOVF   64,W
01FD:  SUBLW  17
01FE:  BTFSS  03.0
01FF:  GOTO   20C
....................       T_byte1 = (T_byte1<<1) | a[i];  
0200:  BCF    03.0
0201:  RLF    22,W
0202:  MOVWF  66
0203:  MOVLW  3C
0204:  ADDWF  64,W
0205:  MOVWF  04
0206:  BCF    03.7
0207:  MOVF   00,W
0208:  IORWF  66,W
0209:  MOVWF  22
020A:  INCF   64,F
020B:  GOTO   1FC
....................       for(i=24; i<32; i++) 
020C:  MOVLW  18
020D:  MOVWF  64
020E:  MOVF   64,W
020F:  SUBLW  1F
0210:  BTFSS  03.0
0211:  GOTO   21E
....................       T_byte2 = (T_byte2<<1) | a[i];  
0212:  BCF    03.0
0213:  RLF    23,W
0214:  MOVWF  66
0215:  MOVLW  3C
0216:  ADDWF  64,W
0217:  MOVWF  04
0218:  BCF    03.7
0219:  MOVF   00,W
021A:  IORWF  66,W
021B:  MOVWF  23
021C:  INCF   64,F
021D:  GOTO   20E
....................       for(i=32; i<40; i++) 
021E:  MOVLW  20
021F:  MOVWF  64
0220:  MOVF   64,W
0221:  SUBLW  27
0222:  BTFSS  03.0
0223:  GOTO   230
....................       int8 CheckSum = (CheckSum<<1) | a[i]; //CheckSum =byte5 
0224:  BCF    03.0
0225:  RLF    65,W
0226:  MOVWF  66
0227:  MOVLW  3C
0228:  ADDWF  64,W
0229:  MOVWF  04
022A:  BCF    03.7
022B:  MOVF   00,W
022C:  IORWF  66,W
022D:  MOVWF  65
022E:  INCF   64,F
022F:  GOTO   220
....................       if(CheckSum == T_byte1 + T_byte2 + RH_byte1+ RH_byte2) test=1; 
0230:  MOVF   23,W
0231:  ADDWF  22,W
0232:  ADDWF  20,W
0233:  ADDWF  21,W
0234:  SUBWF  65,W
0235:  BTFSC  03.2
0236:  BSF    3B.0
0237:  GOTO   193
....................     } 
0238:  BCF    0A.3
0239:  BCF    0A.4
023A:  GOTO   3A9 (RETURN)
.................... } 
....................  
.................... void main() 
*
037B:  MOVF   03,W
037C:  ANDLW  1F
037D:  MOVWF  03
037E:  MOVLW  0C
037F:  BSF    03.5
0380:  MOVWF  19
0381:  MOVLW  A2
0382:  MOVWF  18
0383:  MOVLW  90
0384:  BCF    03.5
0385:  MOVWF  18
0386:  CLRF   39
0387:  CLRF   38
0388:  BSF    03.5
0389:  BSF    1F.0
038A:  BSF    1F.1
038B:  BSF    1F.2
038C:  BCF    1F.3
038D:  MOVLW  07
038E:  MOVWF  1C
038F:  BCF    03.7
.................... { 
....................    port_b_pullups(0); 
0390:  BSF    01.7
....................    set_tris_b(0); 
0391:  MOVLW  00
0392:  MOVWF  06
....................    set_tris_d(0); 
0393:  MOVWF  08
....................    output_low(RED); 
0394:  BCF    03.5
0395:  BCF    08.1
....................    output_low(BLUE); 
0396:  BCF    08.0
....................    lcd_init(); 
0397:  GOTO   0BF
....................    lcd_putc("\f"); 
0398:  MOVLW  04
0399:  BSF    03.6
039A:  MOVWF  0D
039B:  MOVLW  00
039C:  MOVWF  0F
039D:  BCF    03.6
039E:  CALL   13C
....................    int1 flash = 0; 
039F:  BCF    3A.0
....................    while(TRUE) 
....................    { 
....................       restart_wdt(); 
03A0:  CLRWDT
....................       delay_ms(500); 
03A1:  MOVLW  02
03A2:  MOVWF  3B
03A3:  MOVLW  FA
03A4:  MOVWF  66
03A5:  CALL   029
03A6:  DECFSZ 3B,F
03A7:  GOTO   3A3
....................       Read_DTH11(); 
03A8:  GOTO   192
....................        
....................       if (flash == 0) 
03A9:  BTFSC  3A.0
03AA:  GOTO   3E2
....................       { 
....................          lcd_gotoxy(1,1); 
03AB:  MOVLW  01
03AC:  MOVWF  42
03AD:  MOVWF  43
03AE:  CALL   0FE
....................          printf(lcd_putc,"Do am       %d ", RH_byte1); 
03AF:  MOVLW  05
03B0:  BSF    03.6
03B1:  MOVWF  0D
03B2:  MOVLW  00
03B3:  MOVWF  0F
03B4:  BCF    03.0
03B5:  MOVLW  0C
03B6:  BCF    03.6
03B7:  MOVWF  3B
03B8:  CALL   23B
03B9:  MOVF   20,W
03BA:  MOVWF  3B
03BB:  MOVLW  18
03BC:  MOVWF  3C
03BD:  CALL   2A7
03BE:  MOVLW  20
03BF:  MOVWF  41
03C0:  CALL   110
....................          lcd_putc("%"); 
03C1:  MOVLW  0D
03C2:  BSF    03.6
03C3:  MOVWF  0D
03C4:  MOVLW  00
03C5:  MOVWF  0F
03C6:  BCF    03.6
03C7:  CALL   13C
....................          lcd_gotoxy(1,2); 
03C8:  MOVLW  01
03C9:  MOVWF  42
03CA:  MOVLW  02
03CB:  MOVWF  43
03CC:  CALL   0FE
....................          printf(lcd_putc,"Nhiet do    %doC", T_byte1); 
03CD:  MOVLW  0E
03CE:  BSF    03.6
03CF:  MOVWF  0D
03D0:  MOVLW  00
03D1:  MOVWF  0F
03D2:  BCF    03.0
03D3:  MOVLW  0C
03D4:  BCF    03.6
03D5:  MOVWF  3B
03D6:  CALL   23B
03D7:  MOVF   22,W
03D8:  MOVWF  3B
03D9:  MOVLW  18
03DA:  MOVWF  3C
03DB:  CALL   2A7
03DC:  MOVLW  6F
03DD:  MOVWF  41
03DE:  CALL   110
03DF:  MOVLW  43
03E0:  MOVWF  41
03E1:  CALL   110
....................           
....................       } 
....................       if (flash == 1) 
03E2:  BTFSS  3A.0
03E3:  GOTO   41B
....................       { 
....................          lcd_gotoxy(1,1); 
03E4:  MOVLW  01
03E5:  MOVWF  42
03E6:  MOVWF  43
03E7:  CALL   0FE
....................          printf(lcd_putc,"Do am   :   %d ", RH_byte1); 
03E8:  MOVLW  17
03E9:  BSF    03.6
03EA:  MOVWF  0D
03EB:  MOVLW  00
03EC:  MOVWF  0F
03ED:  BCF    03.0
03EE:  MOVLW  0C
03EF:  BCF    03.6
03F0:  MOVWF  3B
03F1:  CALL   23B
03F2:  MOVF   20,W
03F3:  MOVWF  3B
03F4:  MOVLW  18
03F5:  MOVWF  3C
03F6:  CALL   2A7
03F7:  MOVLW  20
03F8:  MOVWF  41
03F9:  CALL   110
....................          lcd_putc("%"); 
03FA:  MOVLW  1F
03FB:  BSF    03.6
03FC:  MOVWF  0D
03FD:  MOVLW  00
03FE:  MOVWF  0F
03FF:  BCF    03.6
0400:  CALL   13C
....................          lcd_gotoxy(1,2); 
0401:  MOVLW  01
0402:  MOVWF  42
0403:  MOVLW  02
0404:  MOVWF  43
0405:  CALL   0FE
....................          printf(lcd_putc,"Nhiet do:   %doC", T_byte1); 
0406:  MOVLW  20
0407:  BSF    03.6
0408:  MOVWF  0D
0409:  MOVLW  00
040A:  MOVWF  0F
040B:  BCF    03.0
040C:  MOVLW  0C
040D:  BCF    03.6
040E:  MOVWF  3B
040F:  CALL   23B
0410:  MOVF   22,W
0411:  MOVWF  3B
0412:  MOVLW  18
0413:  MOVWF  3C
0414:  CALL   2A7
0415:  MOVLW  6F
0416:  MOVWF  41
0417:  CALL   110
0418:  MOVLW  43
0419:  MOVWF  41
041A:  CALL   110
....................       } 
....................       if (flash == 0) flash = 1; 
041B:  BTFSC  3A.0
041C:  GOTO   41F
041D:  BSF    3A.0
041E:  GOTO   420
....................       else flash = 0; 
041F:  BCF    3A.0
....................       sprintf(str,"%d|%d|", T_byte1, RH_byte1); 
0420:  CLRF   39
0421:  MOVLW  24
0422:  MOVWF  38
0423:  MOVF   22,W
0424:  MOVWF  3B
0425:  MOVLW  18
0426:  MOVWF  3C
0427:  CALL   30B
0428:  MOVLW  7C
0429:  MOVWF  41
042A:  CALL   2FE
042B:  MOVF   20,W
042C:  MOVWF  3B
042D:  MOVLW  18
042E:  MOVWF  3C
042F:  CALL   30B
0430:  MOVLW  7C
0431:  MOVWF  41
0432:  CALL   2FE
....................       puts(str); 
0433:  MOVLW  24
0434:  MOVWF  04
0435:  BCF    03.7
0436:  GOTO   362
0437:  MOVLW  0D
0438:  BTFSS  0C.4
0439:  GOTO   438
043A:  MOVWF  19
043B:  MOVLW  0A
043C:  BTFSS  0C.4
043D:  GOTO   43C
043E:  MOVWF  19
043F:  GOTO   3A0
....................    } 
....................  
.................... } 
0440:  SLEEP

Configuration Fuses:
   Word  1: 3F36   HS WDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
